#!/usr/bin/env Rscript
#; -*- mode: R;-*-
#######################################################################
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#######################################################################


if (!require("MatrixEQTL")) {
  source("http://bioconductor.org/biocLite.R")
  biocLite("MatrixEQTL")
}

args <- commandArgs(trailingOnly=TRUE)

if (length(args)!=6 ) {
  print("Error: usage run_matrix_eqtl snp_file expr_file  cov_file gene_pos_file pv_threshold out.file")
  quit(status=1)
}

library("MatrixEQTL")

useModel <- modelLINEAR; # modelANOVA or modelLINEAR or modelLINEAR_CROSS
SNP_file_name <- args[1]
expression_file_name <- args[2]
covariates_file_name <- args[3]
gene_file_name <- args[4]
pvOutputThreshold <- as.numeric(args[5])
out.file <- args[6]

#SNP_file_name <- "test/test2_eqtl/dna_241320ef0c0af7063933be1c2e47e38b/plink_d0049151b87e1aa6f9f9d3ab756cef6d/1/chr1.genotype.tsv"
#expression_file_name <- "test/test2_eqtl/rna_83450efdeb1cef73895f42811a9ca116/pheno.filtered.tsv"
#covariates_file_name <- "test/ex1/cov_test.tsv"
#pvOutputThreshold<-0.05
#out.file <- "AAAAAAAA"

snps <- SlicedData$new();
snps$fileDelimiter <- "\t";      # the TAB character
snps$fileOmitCharacters <- "NA"; # denote missing values;
snps$fileSkipRows <- 1;          # one row of column labels
snps$fileSkipColumns <- 1;       # one column of row labels
snps$fileSliceSize <- 2000;      # read file in pieces of 2,000 rows
snps$LoadFile(SNP_file_name);


gene <- SlicedData$new();
gene$fileDelimiter <- "\t";      # the TAB character
gene$fileOmitCharacters <- "NA"; # denote missing values;
gene$fileSkipRows <- 1;          # one row of column labels
gene$fileSkipColumns <- 1;       # one column of row labels
gene$fileSliceSize <- 2000;      # read file in slices of 2,000 rows
gene$LoadFile(expression_file_name);

## Load covariates
cvrt <- SlicedData$new();
cvrt$fileDelimiter <- "\t";      # the TAB character
cvrt$fileOmitCharacters <- "NA"; # denote missing values;
cvrt$fileSkipRows <- 1;          # one row of column labels
cvrt$fileSkipColumns <- 1;       # one column of row labels
# TODO: transpose the matrix of covariates
#if(length(covariates_file_name)>0) {
#  cvrt$LoadFile(covariates_file_name);  
#}

#

# snp chr pos
snpspos = read.table(SNP_file_name, header = TRUE, stringsAsFactors = FALSE)[,1,drop=FALSE]
snpspos <- cbind(snpspos,matrix(unlist(strsplit(as.character(snpspos[,1]),split="_")),byrow=T,ncol=2))
colnames(snpspos) <- c("snp","chr","pos")
# gene_id chr s1 s2
# TODO
genepos = read.table(gene_file_name, header = FALSE, stringsAsFactors = FALSE);
# reorder the columns
colnames(genepos) <- c("chr","s1","s2","geneid")
genepos <- genepos[,c("geneid","chr","s1","s2")]
cat("Read gene pos. file:",nrow(genepos),"\n")

me <- Matrix_eQTL_main(
  snps = snps,
  gene = gene,
  cvrt = cvrt,
  output_file_name = out.file,
  pvOutputThreshold = pvOutputThreshold,
  useModel = useModel,
  snpspos = snpspos,
  genepos = genepos,
  verbose = TRUE,
  cisDist=1000000,
  pvalue.hist = TRUE,
  min.pv.by.genesnp = FALSE,
  noFDRsaveMemory = FALSE);
#  errorCovariance = errorCovariance,
#pvalue.hist = "qqplot"
# for debugging
save.image(file=paste(out.file,".Rdata",sep=""))

cat('Analysis done in: ', me$time.in.sec, ' seconds', '\n');
cat('Detected local eQTLs:', '\n');
show(me$cis$eqtls)
cat('Detected distant eQTLs:', '\n');
show(me$trans$eqtls)


## Plot the Q-Q plot of local and distant p-values
png(paste(out.file,".png",sep=""))
plot(me)
dev.off()
q(status=0)
