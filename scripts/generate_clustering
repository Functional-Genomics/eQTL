#!/usr/bin/env Rscript
#; -*- mode: R;-*-
#######################################################################
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#######################################################################

args <- commandArgs(trailingOnly=TRUE)

if (length(args)!=3 && length(args)!=4 ) {
  print("Error: usage generate_clustering expr.tsv sample2labels.tsv out_file [colors]")
  quit(status=1)
}

expr.file <- args[1]
map.file <- args[2]
out.file <- args[3]
col.map.file <- NULL
if ( length(args) == 4 ) {
  col.map.file <- args[4]
}
# TODO: validate files


#
expr.df <- read.table(expr.file,header = T,check.names=F,sep='\t')
rownames(expr.df) <- expr.df[,1]
#rownames(expr.df)
expr.df <- expr.df[,-1,drop=FALSE]
cat(dim(expr.df),"\n")

has.genes <- TRUE
if ( sum(!rownames(expr.df)  %in% colnames(expr.df))==0 ) {
  has.genes <- FALSE
  cat("Squared matrix - assuming that rows/cols are samples.\n")
}

map.df <- read.table(map.file,header = F,check.names=F,sep='\t')
# 1st column=sample
# 2nd column=class/label
if ( length(rownames(expr.df))==length(colnames(expr.df)) && sum(rownames(expr.df)== colnames(expr.df)) ==0 ) {
  cat("ERROR: some samples in expr matrix were not found in ",map.file,"\n")
  quit(status=1)
}

# subset the mapping
map.df <- map.df[map.df$V1 %in% colnames(expr.df),]

#
map.df.labels <- unique(as.character(map.df$V2))
#map.df.labels

# colors
if ( !is.null(col.map.file)) {
  nclass <- length(unique(map.df$V2))
  cat("Reading file with mapping between classes and colors from ",col.map.file,"...\n")
  col.df <- read.table(col.map.file,header = F,check.names=F,sep='\t',comment.char=" ")
  cat(dim(col.df),"\n")
  # 1st column=class/label
  # 2nd column=colour
  if ( nclass > nrow(col.df) ) {
    cat("ERROR: invalid number of classes in ",col.map.file,"\n")
    quit(status=1)
  }
  miss.class <- ! map.df.labels %in% as.character(col.df$V1)
  if ( sum(miss.class) > 0 ) {
    cat("ERROR: incomplete ",col.map.file,", missing ",sum(miss.class),"(e.g., ",map.df.labels[miss.class],")\n")
    quit(status=1)
  }
  class2colour <- as.character(col.df$V2)
  names(class2colour) <- as.character(col.df$V1)
  class2colour <- class2colour[map.df.labels]
  cat("Reading file with mapping between classes and colors...done.\n")
} else {
  if(!require(RColorBrewer)) {
    source("http://bioconductor.org/biocLite.R")
    biocLite("RColorBrewer",suppressUpdates=T)
  }
  suppressPackageStartupMessages(library(RColorBrewer))
  getPalette = colorRampPalette(brewer.pal(9, "Set1"))
  class2colour <- getPalette(length(map.df.labels))
  names(class2colour) <- map.df.labels
}
samples2colour <- as.character(map.df$V1)

rownames(map.df) <- map.df$V1
samples2colour <- as.character(class2colour[map.df[samples2colour,"V2"]])
names(samples2colour) <- as.character(map.df$V1)

samples2colour
if(!require(gplots)) {
  source("http://bioconductor.org/biocLite.R")
  biocLite("gplots",suppressUpdates=T)
}
suppressPackageStartupMessages(library("gplots"))

if ( has.genes) {
  data <- cor(expr.df,method="spearman")
} else {
  expr.df
  data <- as.matrix(data.frame(expr.df))
}
ncolors <- max(nrow(data)*ncol(data),800)
colors <- topo.colors(ncolors)
png(filename=out.file,width=900,height=900,res=150)

heatmap.2(data,col=colors,scale="none",cexCol=0.8,cexRow=0.8,trace="none",keysize=1,ColSideColors= samples2colour[colnames(expr.df)],srtCol=45)
nrow(data)
dev.off()

q(status=0)
