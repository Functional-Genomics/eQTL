#!/bin/sh
#; -*- mode: Makefile;-*-
#the next line restarts using\
exec make --warn-undefined-variables -Rf "$0"  ${1+"$@"} 
# --trace
# =========================================================
# Copyright 2015-2016
#
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================
###############################################################
# disable deletion of temporary files
.SECONDARY: 
.ONESHELL:

SHELL=bash
##################
# Setup some paths
# path to script


# Requires make 4.1 or above
VERSION_OK=$(shell if [ `make --version|head -n 1 | cut -f3 -d\ ` \< 4.1 ]; then echo 0; else echo 1; fi )
ifeq ($(VERSION_OK),0)
 $(error make version needs to be 4.1 or above)
endif

script_path!=dirname "`which eqtl_pipeline`"

################################################################################
# load the different components
include $(script_path)/../aux/mk/utils.mk

################################################################################
# Variables
################################################################################

################################################################################
# Default values
################################################################################


################################################################################
# go


###############################################################
# Check and validate the parameters values

$(info * )
$(info * Required Parameters:)

#***********************
# Name of the experiment
ifndef name
 $(call p_error, missing argument name!)
else
 $(info *	name=$(name))
endif


# expr_matrix (TSV File)
ifndef expr_matrix
 $(call p_error, missing argument expr_matrix!)
else
 $(info *	expr_matrix=$(expr_matrix))
endif
$(call file_exists,$(expr_matrix))


ifdef var_matrix
# Ignore VCFs and use the matrix with the variants provided by the user
#columns-samples
#rows-variants
ifndef var_matrix
 $(call p_error, missing argument var_matrix)
else
 $(info *	var_matrix=$(var_matrix))
endif
$(call file_exists,$(var_matrix))


# variant id\tchr\tstart\tend
ifndef var_pos
 $(call p_error, missing argument var_pos)
else
 $(info *	var_pos=$(var_pos))
endif
$(call file_exists,$(var_pos))

# dummy vars
vcfs:=
mac:=1

# incompatible option (for now?)
ifdef aggr_bed_file
$(error incompatible options: aggr_bed_file and var_matrix)
endif

# var_matrix 
##########################
else
#************************
# VCF specific variables
# two columns
# 1st column: DNA
# 2st column: RNA
ifndef dna_rna_mapfile
 $(call p_error, missing argument dna_rna_mapfile)
else
 $(info *	dna_rna_mapfile=$(dna_rna_mapfile))
endif
$(call file_exists,$(dna_rna_mapfile))


ifndef vcf_toplevel_dir
$(call p_error,vcf_toplevel_dir not defined)
endif
$(info *	vcf_toplevel_dir=$(vcf_toplevel_dir))

ifndef vcfs
 $(call p_error,missing argument vcfs)
endif
ifeq (1,$(words $(vcfs)))
$(call p_error,insufficient number of VCF files (please provide two or more files))
endif
$(info *	|vcfs|=$(words $(vcfs)))
#$(call file_exists,$(vcfs))
$(foreach l,$(vcfs),$(call file_exists,$(vcf_toplevel_dir)/$(l)))

endif

#
ifndef cov_matrix
cov_matrix=none
$(call p_error,cov_matrix not defined)
endif
$(call file_exists,$(cov_matrix))
$(info *	cov_matrix=$(cov_matrix))
# eqtl_pipeline vcfs=`ls mydir/*.vcf.gz`


#********* 
# GTF file?
ifndef gtf_file
 $(error gtf_file not defined)
endif
$(info *       gtf_file  = $(gtf_file))
$(call file_exists,$(gtf_file))

#********
#
ifndef class2colours_file
class2colours_file=
else
$(info *       class2colours_file  = $(class2colours_file))
$(call file_exists,$(class2colours_file))
endif

#*************
# sample2class
# file containing the mapping between samples and a class/label
ifndef sample2class_file
 $(error sample2class_file not defined)
endif
$(info *       sample2class_file  = $(sample2class_file))
$(call file_exists,$(sample2class_file))


# default list of chromosomes
chromosomes?=1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 X Y MT

ifeq ($(strip $(chromosomes)),)
$(call p_error, no chromosome was provided)
endif



# LIMIX binary folder
LIMIX_BINARY=$(EPIPELINE_DIR)/anaconda/bin
# 
CHANGE_BETA_SIGN?=y


#####################
# Other Optional parameters
#####################
$(info * )


#
def_vars=minGQ minRD  min_expr min_perc_samples expr_transform hidden_k  mac peer_iterations snr_threshold max_missing vcf_filter_cmd chromosomes n_folds fdr_threshold subfolder_name use_kinship cis_window limix_use_peer_covariates vcf_filter_pass fix_vcf_cmd n_permutations snp_alpha

# optional: bed file to aggregate the variants
aggr_bed_file?=
# value between 0 and 1 
geno_threshold?=1
ifneq ($(aggr_bed_file),)
$(info *	aggr_bed_file=$(aggr_bed_file))
$(call file_exists,$(aggr_bed_file))
def_vars+=geno_threshold
endif


maf?=0.01
snp_alpha?=1.0
use_kinship?=y
subfolder_name?=
peer_iterations?=100
fdr_threshold?=0.05
minGQ?=50
minRD?=20
limix_use_peer_covariates?=n
cis_window?=1000000
# signal-to-noise ration threshold
snr_threshold?=75
vcf_filter_pass?=n
# vcf_filter="TP > 0.95 ....."

vcf_filter_cmd?=annai_filter_vcf.sh
fix_vcf_cmd?=fix_vcf_header.sh

n_permutations?=1
n_folds?=1000
min_expr?=1
min_perc_samples?=0.5
#possible values: gaussian log none
expr_transform?=none
hidden_k?=10
max_missing?=0.8
eqtl_method?=limix

mac?=20

#
ifdef maf
mac=$(call get_mac)
$(info *	mac=$(mac) (maf=$(maf)))
else
maf=
endif

$(info * )
$(info * Optional Parameters:)
$(foreach v,$(def_vars),$(info * 	$(v)=$($(v))))

settings_vars=$(def_vars) sample2class_file cov_matrix dna_rna_mapfile expr_matrix corr_method maf

##############################


##############################
ifndef var_matrix
ifneq (0,$(shell [ $(mac) -lt $(words $(vcfs)) ] && echo 0))
$(error ERROR: mac ($(mac)) value is greater than the number of vcfs)
endif
endif
##############################
# to filter or not to filter based on pass
ifeq ($(vcf_filter_pass),y)
vcf_filter_option=
else
vcf_filter_option=-f
endif

##############################
# by default the kinship is used
# so no parameter needs to be passed to geno_preprocessing.py
ifeq ($(use_kinship),y)
use_kinship_option=
else
use_kinship_option=n
endif
##############################
# expression correction method
SUPPORTED_CORR_METHODS=peer panama
ifndef corr_method
corr_method=none
endif

#corr_method expr_corr_method?
ifeq (,$(filter $(corr_method),$(SUPPORTED_CORR_METHODS) none))
$(error corr_method value $(corr_method) not supported)
endif

#ifeq ($(corr_method),peer) 
$(info *	corr_method=$(corr_method))
#endif


###############################
#
SUPPORTED_EQTL_METHODS=limix matrix_eqtl fastqtl

#corr_method expr_corr_method?
ifeq (,$(filter $(eqtl_method),$(SUPPORTED_EQTL_METHODS)))
$(error eqtl_method value $(eqtl_method) not supported)
endif

#ifeq ($(corr_method),peer) 
$(info *	eqtl_method=$(eqtl_method))
#endif



#
TARGETS0=
TARGETS1=
TARGETS2=
TARGETS3=
TARGETS4=
TARGETS5=
TARGETS6=
TARGETS7=
TARGETS8=
TARGETS9=

#
# ${name}
#   |+-------------dna_[dna_filter_options_md5]
#   |+-------------dna_[dna_filter_options_md5]/plink_[dna_filder_options_md5]
#   |+-------------rna_[rna_filter_options_md5]
#   |+-------------peer_[step3_md5]/
#   |+-------------panama_[step3_md5]/
#   |+-------------none_[step3_md5]/
#	{1,2,...}
#       1.hd5
# optional
#   |+-------------dna_[dna_filter_options_md5]/plink_[dna_filder_options_md5]/[aggr_bed]

#
ifndef var_matrix
# VCFs
ifeq ($(shell test $(words $(vcfs)) -lt 300; echo $$?),0)
vcfs2hash=$(vcfs)
else
vcfs2hash=$(words $(vcfs))
endif

# HASH
step1_hash!=echo $(minGQ) $(minRD) $(vcf_filter_cmd) $(vcf_filter_option) $(fix_vcf_cmd) |md5sum|cut -f1 -d' ' 
step1a_hash!=echo $(step1_hash) $(mac) $(max_missing) $(vcfs2hash) $(use_kinship_option) $(chromosomes) |md5sum|cut -f1 -d' '
step1b_hash!=echo $(aggr_bed_file) $(geno_threshold) $(step1a_hash) |md5sum|cut -f1 -d' ' 
# end VCF based analysis
else
# Matrix based analysis
step1_hash!=echo $(var_matrix) |md5sum|cut -f1 -d' ' 
step1a_hash!=echo $(step1_hash)  $(chromosomes) |md5sum|cut -f1 -d' '
step1b_hash!=echo $(aggr_bed_file) $(geno_threshold) $(step1a_hash) |md5sum|cut -f1 -d' '
endif


step2_hash!=echo $(min_expr) $(min_perc_samples) $(expr_transform) |md5sum|cut -f1 -d' '


ifeq ($(corr_method),peer)
step3_hash!=echo $(step1b_hash) $(step2_hash) $(peer_iterations) $(limix_use_peer_covariates) $(hidden_k) $(expr_transform) $(snr_threshold)|md5sum|cut -f1 -d' '
else
ifeq ($(corr_method),panama)
step3_hash!=echo $(step1b_hash) $(step2_hash)  $(hidden_k) $(snr_threshold) $(expr_transform) |md5sum|cut -f1 -d' '
else
step3_hash!=echo $(step1b_hash) $(step2_hash)|md5sum|cut -f1 -d' '
endif
endif

##########
# Folders
step1_dir:=$(name)/dna_$(step1_hash)
ifndef var_matrix
step1a_dir:=$(step1_dir)/plink_$(step1a_hash)
ifeq ($(aggr_bed_file),)
step1b_dir:=$(step1a_dir)
else
step1b_dir:=$(step1a_dir)/$(step1b_hash)
endif
else
# var_matrix
step1a_dir:=$(step1_dir)
step1b_dir:=$(step1a_dir)
endif

step2_dir:=$(name)/$(subfolder_name)rna_$(step2_hash)
step3_dir:=$(name)/$(subfolder_name)$(corr_method)_$(step3_hash)
eqtl_dir:=$(step3_dir)/$(corr_method)/$(eqtl_method)_$(cis_window)_$(n_permutations)_$(snp_alpha)_$(fdr_threshold)/
report_dir=$(eqtl_dir)/report

# print the folders
$(info * )
$(info * Output will be placed in $(name)/)

ifndef var_matrix
$(info * DNA folder (step1_dir)=$(step1_dir))
$(info * DNA folder - merged vcfs=$(step1a_dir))
else
$(info * DNA folder (step1_dir)=$(step1_dir))
$(info * DNA folder - files per chr=$(step1a_dir))
endif

ifneq ($(aggr_bed_file),)
$(info * DNA folder - burden and hdf5 files=$(step1b_dir))
endif
$(info * RNA folder (step2_dir)=$(step2_dir))
$(info * QTL folder (step3_dir)=$(eqtl_dir))
$(info * Report/plots folder =$(report_dir))
$(info * )
###############
# names of files
cov_hdf5=$(name)/$(notdir $(basename $(cov_matrix))).hdf5
cov_sorted_hdf5=$(name)/$(notdir $(basename $(cov_matrix))).sorted.hdf5

override expr_matrix:=$(subst .gz,,$(expr_matrix))
gtf_eqtl_tsv=$(subst .gtf,.gtf.eqtl.tsv,$(subst .gz,,$(gtf_file)))
expr_matrix_filename=$(notdir $(basename $(expr_matrix)))
matched_expr_matrix=$(step1a_dir)/$(expr_matrix_filename).matched.tsv

#$(info matched_expr_matrix=$(matched_expr_matrix))
samples_hdf5=$(step1b_dir)/samples.hdf5
kpop_file=$(step1b_dir)/Kpop.hdf5

# 
ifdef var_matrix
var_matrix_filename=$(notdir $(basename $(var_matrix)))
matched_var_matrix=$(step1a_dir)/$(var_matrix_filename).matched.tsv

endif


################################################################################
# Make stuff
phony_targets=
silent_targets= 

empty:=
space:=$(empty) $(empty)#
################################################################################
# AUXILIARY FUNCTIONS
################################################################################

ifdef var_pos
endif


# create the folders
$(foreach f,$(name)/vcf $(step1_dir) $(report_dir) $(step1a_dir) $(step2_dir) $(eqtl_dir),$(shell if [ ! -e $f ]; then mkdir -p $f; fi))


################################################################################
# Default target
$(info ***************************************************************)
all: step0 step1 step2 step3 step4 plots
	@echo "All done!"

################################################################################
#

# generate bed file (compressed
# Chr start end ID S1 S2 ...
%.bed.gz: %.tsv $(gtf_eqtl_tsv)
	genQuantBed.R $(gtf_eqtl_tsv) $< $@.tmp &&
	bgzip -c $@.tmp  > $@.tmp2 && mv $@.tmp2 $@ && rm -f  $<.tmp  $@.tmp2

%.bed.gz.tbi: %.bed.gz
	tabix -p bed $< || (rm -f $@ && exit 1)


$(cov_hdf5): $(cov_matrix)
	get_covariates.py $< $@.tmp && mv $@.tmp $@ 

################################################################################
#
# Step0,1 and 2 may be executed independently
phony_targets+=step0 

step0: $(cov_hdf5)
#	$(call p_info,"Step 0 complete")

TARGETS0+=$(cov_hdf5)

################################################################################
# DNA / step1 
include $(script_path)/../aux/mk/dna.mk

################################################################################
# RNA
# step 2 need the kpop file
TARGETS5+=step1 step2
include $(script_path)/../aux/mk/rna.mk

################################################################################
# step3
include $(script_path)/../aux/mk/correction.mk

################################################################################
include $(script_path)/../aux/mk/eqtl.mk

################################################################################
# Reports/plots
################################################################################

include $(script_path)/../aux/mk/reports.mk

###################################################
targets0:
	$(info $(TARGETS0)) echo -n

targets1:
	$(info $(TARGETS1)) echo -n

targets2:
	$(info $(TARGETS2)) echo -n
targets3:
	$(info $(TARGETS3)) echo -n
targets4:
	$(info $(TARGETS4)) echo -n
targets5:
	$(info $(TARGETS5)) echo -n

targets6:
	$(info $(TARGETS6)) echo -n

targets7:
	$(info $(TARGETS7)) echo -n

targets8:
	$(info $(TARGETS8)) echo -n

targets9:
	$(info $(TARGETS9)) echo -n


###################################################
# FORCE the program to run even if files haven't changed
FORCE:


#PHONY: performance improvement. Tell MAKE that those targets don't generate any files. 
.PHONY:  $(phony_targets)
.SILENT: $(silent_targets)

###################################################
