#!/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2016,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is based on code from iRAP (https://github.com/nunofonseca/irap)
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
# =========================================================
suppressPackageStartupMessages(library("optparse"))

###############################################################
# Functions from iRAP (copy to avoid an extra dependency)
perror <- function(...) {
  cat(paste("[ERROR] ",...,"\n",sep=""),file=stderr())
}
pinfo <- function(...) {
  cat(paste("[INFO] ",...,"\n",sep=""),file=stdout())
}

myParseArgs <- function(usage,option_list,filenames.exist=NULL,multiple.options=NULL,mandatory=NULL,...) {

  # get command line options, if help option encountered print help and exit,
  # otherwise if options not found on command line then set defaults,
  parser <- OptionParser(usage = usage, option_list=option_list)
  opt <- parse_args(parser,...)
  
  for ( m in mandatory ) {
    if ( is.null(opt[[m]]) ) {
        perror("Parameter ",m," needs to be defined")
        q(status=1)
    }
  }  
  for ( p in filenames.exist ) {
    if (! is.null(opt[[p]]) ) {
      if (! file.exists(opt[[p]]) ) {
        perror("File ",opt[[p]]," not found")
        q(status=1)
      }
    }
  }

  for ( op in names(multiple.options) ) {
    if ( ! opt[[op]] %in% multiple.options[[op]] ) {
      perror("Invalid value ",opt[[op]]," for option ",op)
      q(status=1)
    }
  }
  return(opt)
}

# load a file with a quant. matrix
# returns NULL in case of failure
quant.load <- function(f,clean.cuff=FALSE) {
  tsv.data <- NULL

  # header is always present
  tsv.data <- qload.tsv(f,header=TRUE)
  if(is.null(tsv.data)) return(NULL);
  rownames(tsv.data) <- as.character(tsv.data[,1])
  tsv.data <- tsv.data[,-1,drop=FALSE]
  if (clean.cuff) {
    sel<-grep("^CUFF.*",rownames(tsv.data),perl=T,invert=TRUE)
    tsv.data <- tsv.data[sel,,drop=FALSE]
  }
  return(tsv.data)
}

# keep backwards compatibility by using read.table when data.table is not 
# available
qload.tsv <- function(f,header,comment.char="") {
  tsv.data <- NULL
  if (require("data.table",quietly=TRUE,character.only=TRUE) &&
      compareVersion(as.character(packageVersion("data.table")),"1.9.6")>=0) {
    library("data.table")
    if ( sum(grep(".gz$",f)) ) {
      f <- paste("zcat ",f,sep="")
    } else {
      f <- paste("cat ",f,sep="")
    }
    # not optimal, but faster than read.table
    if ( comment.char!="") {
      f <- paste(f," | grep -v \"^",comment.char,"\"",sep="")
    }
    tryCatch(tsv.data <- fread(input=f,sep = "\t", header="auto",check.names=FALSE,data.table=FALSE),error=function(x) NULL)
  } else 
    tryCatch(tsv.data <- read.table(f,sep = "\t", header=header, comment.char=comment.char, quote = "\"",check.names=FALSE),error=function(x) NULL)
  return(tsv.data)
}

quantile_norm <- function(df,means=NULL){
  if ( ! is.data.frame(df) ) {
    perror("Expected a data frame")
  }  
  #
  if ( ! is.null(means)) {
    l1 <- nrow(df)
    l2 <- length(means)
    if ( l1 != l2 ) {
      pwarning("Number of rows in data frame (",l1,") does not match with the length of quantile normalized means vector (",l2,")")
      if ( l1 > l2 ) {
        perror("Unable to proceed")
      }
      # l1 <l2
      offset <- l2-l1
      means <- means[append(2,seq(offset+2,l2))]
      #pinfo(length(means),"==",l1)
    }  
  }
  print(dim(df))
  # increasing
  ranks <- apply(df,2,rank,ties.method="max")
  # sort: increasing
  if (is.null(means) ) {
    means <- apply(data.frame(apply(df, 2, sort)), 1, mean, na.rm=T)
  }
  df_qn<- apply(ranks, 2, quantile_norm_vect, means)
  rownames(df_qn) <- rownames(df)
  return(list(qn=df_qn,means=means))
}

quantile_norm_vect <- function(v,qn_values) {
  lv <- length(v)
  lqn <- length(qn_values)
  if ( lv!=lqn ) {
    perror("length of vector v (",lv,") is different from qn_means' length (",lqn,")")
  }
  
  p <- rank(v,ties.method="max")
  return(qn_values[p])
}

###############################################################

usage <- "irap_qn -i quant_tsv_file -m mapping_tsv_file -o output_tsv_file"
option_list <- list(
  make_option(c("-o","--out"),type="character",default=NULL,help="Output quantification file"),
  make_option(c("-i","--in"),type="character",default=NULL,dest="tsv_file",help="Quantification matrix"),
  make_option(c("-m","--map"),type="character",default=NULL,dest="map_tsv_file",help="Mapping file: samples to classes"),
  make_option(c("-c", "--cores"), type="character",default="1",dest="num_cores",help="Number of cores to use ([default %default])")
)

multiple.options = list()
filenames <- c("tsv_file","qn_vector_file") ;#filenames that must exist (if defined)

# check multiple options values
mandatory <- c("tsv_file","out","map_tsv_file")

#
args <- commandArgs(trailingOnly = TRUE)
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory,args=args)

suppressPackageStartupMessages(library(parallel))
tryCatch(num.cores <- as.integer(as.numeric(opt$num_cores)),warning=
         function(w) {
           perror("Invalid number of cores ",opt$num_cores)
           q(status=3)    
       }
)
if (num.cores<1) {
  perror("Invalid number of cores ",opt$num_cores)
  q(status=3)    
}

if ( num.cores>parallel:::detectCores()) {
  num.cores <- parallel:::detectCores()
  pwarning("The number of cores to use exceeds the cores available. Reducing the limit to ",parallel:::detectCores())
}

options(cores=num.cores)
options(mc.cores=num.cores)

# 
#opt <- list()
#opt$tsv_file <- "ex1/pheno.tsv"
#opt$map_tsv_file <- "ex1/sample2class.tsv"


pinfo("Loading ",opt$tsv_file)
quant <- quant.load(opt$tsv_file)
pinfo("Loading ",opt$tsv_file, " complete")
pinfo("# genes:",nrow(quant))
pinfo("# samples:",ncol(quant))
pinfo("Loading ",opt$map_tsv_file)
mapping <- read.table(opt$map_tsv_file,sep='\t',header=FALSE)
pinfo("Loading ",opt$map_tsv_file, " complete")


pinfo("Starting quantile normalization (this may take a while)...")

rownames(mapping)<-mapping[,1]
#keep cancer studies
classes<-unique(as.character(mapping[,2]))
pinfo("# Classes:",length(classes),"\n")
# keep only the classes with samples
mapping <- mapping[mapping[,1]%in%colnames(quant),]
classes<-unique(as.character(mapping[,2]))
pinfo("# Classes with samples in the expression matrix:",length(classes),"\n")

qn_df_group <- function(group,df,mapping,...) {
  samples<- rownames(mapping)[mapping[,2]==group]
  temp_quant<- quantile_norm(df[,colnames(df) %in% samples,drop=FALSE])
  return(temp_quant$qn)
}

qn_df<- NULL
for (class in classes) {
  pinfo("Computing QN for ",class,"...")
  qn_df<- cbind(qn_df,qn_df_group(class,quant,mapping))
  pinfo("Computing QN for ",class,"...done.")
}

pinfo("Quantile normalization complete.")

pinfo("Generating boxplots...")
#png(file=paste(opt$out,".png",sep=""),width=800,height=800)
#par(mfrow=c(2,1),bty="l")
#boxplot(abs(quant[,colnames(qn_df)])+1,log="y",las=2,ylab="Expr.")
#boxplot(abs(qn_df)+1,log="y",las=2,ylab="QN Expr.")
#dev.off()

# without outliers
w <- 1
xnames <- colnames(qn_df)
if ( ncol(qn_df)>100 ) {
  w <- 1+round(ncol(qn_df)/300,0)
  xnames <-  rep("",ncol(qn_df))
}
png(file=paste(opt$out,"_no.png",sep=""),width=800*w,height=800)
par(mfrow=c(2,1),bty="l")
boxplot(abs(quant[,colnames(qn_df)])+1,outline=F,log="y",las=2,ylab="Expr.",names=xnames)
boxplot(abs(qn_df)+1,log="y",outline=F,las=2,ylab="QN Expr.",names=xnames)
dev.off()
pinfo("Generating boxplots...done.")

# keep the same initial ordering for the common columns
cols <- colnames(quant)[colnames(quant) %in% colnames(qn_df)]
qn_df <- qn_df[,cols]

Feature <- rownames(qn_df)
qn_df <- cbind(Feature,qn_df)
write.table(file=opt$out,x=qn_df, quote=F,sep="\t",row.names=FALSE,col.names=TRUE)

q(status=0)
