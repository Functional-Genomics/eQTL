#!/bin/env Rscript
#; -*- mode: R;-*-
# =========================================================
# Copyright 2012-2016,  Nuno A. Fonseca (nuno dot fonseca at gmail dot com)
#
# This file is part of iRAP.
#
# This is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with iRAP.  If not, see <http://www.gnu.org/licenses/>.
#
#
#    $Id: irap.txt Nuno Fonseca Wed Feb 6 00:51:29 2013$
# =========================================================
suppressPackageStartupMessages(library("optparse"))

IRAP.DIR <- Sys.getenv(c("IRAP_DIR"))
if ( IRAP.DIR == "" ) {
  cat("ERROR: environment variable IRAP_DIR is not set\n")
  q(status=1)
}
# specify our desired options in a list
#
source(paste(IRAP.DIR,"aux/R","irap_utils.R",sep="/"))
pdebug.enabled <- FALSE

#######################
usage <- "irap_qn -i quant_tsv_file -m mapping_tsv_file [-q quantile_norm_vector -c num_cores] -o output_tsv_file"
option_list <- list(
  make_option(c("--debug"),action="store_true",dest="debug",default=FALSE,help="Debug mode"),
  make_option(c("-o","--out"),type="character",default=NULL,help="Output quantification file"),
  make_option(c("-i","--in"),type="character",default=NULL,dest="tsv_file",help="Quantification matrix"),
  make_option(c("-m","--map"),type="character",default=NULL,dest="map_tsv_file",help="Mapping file: samples to classes"),
  make_option(c("-q","--qn_vec"),type="character",default=NULL,dest="qn_vector_file",help="Filename with the normalization vector to use."),
  make_option(c("-c", "--cores"), type="character",default="3",dest="num_cores",help="Number of cores to use ([default %default])")
)

multiple.options = list()
filenames <- c("tsv_file","qn_vector_file") ;#filenames that must exist (if defined)

# check multiple options values
mandatory <- c("tsv_file","out","map_tsv_file")

#
args <- commandArgs(trailingOnly = TRUE)
opt <- myParseArgs(usage = usage, option_list=option_list,filenames.exist=filenames,multiple.options=multiple.options,mandatory=mandatory,args=args)

pdebug.enabled <- opt$debug
pdebug.save.state("irap_qn","p0")

suppressPackageStartupMessages(library(parallel))
tryCatch(num.cores <- as.integer(as.numeric(opt$num_cores)),warning=
         function(w) {
           perror("Invalid number of cores ",opt$num_cores)
           q(status=3)    
       }
)
if (num.cores<1) {
  perror("Invalid number of cores ",opt$num_cores)
  q(status=3)    
}

irap.assert(num.cores>0)

if ( num.cores>parallel:::detectCores()) {
  num.cores <- parallel:::detectCores()
  pwarning("The number of cores to use exceeds the cores available. Reducing the limit to ",parallel:::detectCores())
}

options(cores=num.cores)
options(mc.cores=num.cores)

pinfo("Loading ",opt$tsv_file)
quant <- quant.load(opt$tsv_file)
pinfo("Loading ",opt$tsv_file, " complete")
pinfo("# genes:",nrow(quant))
pinfo("Loading ",opt$map_tsv_file)
mapping <- read.table(opt$map_tsv_file,sep='\t',header=FALSE)
pinfo("Loading ",opt$map_tsv_file, " complete")


qn_vector <- NULL
if ( ! is.null(opt$qn_vector_file) ) {
  pinfo("Loading ",opt$qn_vector_file)
  qn_vector <- read.tsv(opt$qn_vector_file)
  pinfo("Loading ",opt$qn_vector_file, " complete")
  pinfo("# genes:",nrow(qn_vector))
  if (nrow(qn_vector) < nrow(quant) ) {
    perror(opt$qn_vector_file, " should have the same number or more rows than ",opt$tsv.file)
    q(status=1)
  }
  pinfo("Using provided values for quantile normalization")
}
# remove the rpkm from the libname
#colnames(quant) <- gsub(".rpkm","",colnames(quant))
#pinfo("Starting quantile normalization (this may take a while)...")
#x <- quantile_norm(quant,means=qn_vector$x)

rownames(mapping)<-mapping[,1]
#keep cancer studies
classes<-unique(mapping[,2])
#new df
qn_df<-as.data.frame(rownames(quant))
means<-as.data.frame(rownames(quant))
#quantile normalise
for (class in classes) {
 samples<- rownames(mapping)[mapping[,2]==class]
 pinfo("Starting quantile normalization (this may take a while)...")
 temp_quant<- quantile_norm(quant[,colnames(quant) %in% samples,drop=FALSE])
 qn_df<- cbind(qn_df,temp_quant$qn)
 means<-cbind(means,temp_quant$means)
}

pinfo("Quantile normalization complete.")

rownames(qn_df)<-qn_df[,1]
qn_df<-qn_df[,-1]
rownames(means)<-means[,1]
means<-means[,-1]

#write.table(file=opt$out,x=x$qn,sep="\t",row.names=TRUE)
write.table(file=opt$out,x=qn_df, sep='\t', row.names=TRUE)
write.tsv(file=opt$out,x=qn_df,rownames.label="Gene",fix=FALSE)
pinfo("File ",opt$out," created ")
if ( is.null(qn_vector)) {
  means.file <- paste(gsub(".tsv","",opt$out),".means.tsv",sep="")
  write.table(file=means.file,means,row.names=F,sep="\t")
  pinfo("File ",means.file," created ")
}

q(status=0)
