#!/usr/bin/env python

import sys
import limix.stats.fdr as FDR
from utils import smartAppend
from utils import smartDumpDictHdf5
import scipy as SP
import h5py
import os
import pdb
import glob
import cPickle


def usage():
	print '''
This script generates a final summary file from all the hdf5 files generated by the eqtl_cis.py script. 
Usage:

eqtl_summary.py <chr1.hdf5> <pheno.filtered.hdf5> <correction_method> <peer.hdf5> <Kpop.hdf5> <covariates.hdf5> <window> <nfolds> <samples_list> <summary_filename> '''

#maybe  __main__ is useless since this script will always be run as executable. 

def getRelPos(pos,gene_pos):
	if gene_pos[3]==1:
		rv = pos-gene_pos[1]
	else:
		rv = gene_pos[2]-pos
	return rv

if __name__=='__main__':

	if len(sys.argv[1:]) < 9:
		sys.stderr.write('ERROR: missing parameters\n')
		usage()
		sys.exit(1)

	#load data from that are just needed to import data module 
	geno, pheno, correction_method, hdf_correction, Kpop, covariates,window = sys.argv[1:8]
        window=float(window)
	nfolds = int(sys.argv[8])
	samples_list = sys.argv[9]
	summary = sys.argv[10]
	#populate dictionary with data for eqtl
	import eqtlsettings
	import data as DATA	
	#CFG,correction_method = read_args(geno, pheno, correction_method, hdf_correction, Kpop, covariates)
	#load doata

	data = DATA.data(geno, Kpop, pheno, covariates,  hdf_correction, correction_method,window)
	
	#check if file with samples list exist
	if os.path.isfile(samples_list) != True:
		sys.stderr.write('ERROR : '+samples_list+' not found\n')
		sys.exit(1)

	#load file with samples list
	fileslist = SP.loadtxt(samples_list,dtype='str') #TODO: these list of files needs to be produced before running this script in the make file

	#check if there are missing files according to nfolds		 
	if len(fileslist) != nfolds:
		sys.stderr.write('ERROR : missing files\n')
		sys.exit(1)

	#run the analysis					
	table = {}

	files = SP.sort(fileslist)

	#TODO: clean up the code here a little bit
	first = True
	for file in files:

		print file
		try:
			f = h5py.File(file,'r')
		except:
			print 'Oops! failed to open file'
                        sys.exit(1)
			continue

		geneIDs = f.keys()
		for geneID in geneIDs:
			fgene = f[geneID]
			if window != 0:
				pass
			else:
				table['pos']=fgene['pos'][:]
				table['chrom']=fgene['chrom'][:]
			try:
				temp = {}
				temp['geneID'] = SP.array([str(geneID)])
				temp['file'] = SP.array([str(file)])
				gene_pos = data.getGenePos(geneID)
				temp['gene_pos'] = gene_pos
				#if cis analysis 
				if window != 0:				
				# store pv, pv_perm,cis qv,lambda,lambda_perm,beta
					idx = fgene['pv'][0,:].argmin()
					temp['pv'] = fgene['pv'][:,idx]
					temp['pv_perm'] = fgene['pv_perm'][:,idx]
					temp['qv'] = fgene['qv'][:,idx]
					temp['lambda'] = fgene['lambda'][:,0]
					temp['lambda_perm'] = fgene['lambda_perm'][:,0]
					temp['beta'] = fgene['beta'][:,idx]
					# position and chrom info
					pos = fgene['pos'][[idx]]
					temp['gene_pos'] = gene_pos
					temp['chrom'] = fgene['chrom'][[idx]]
					temp['pos'] = pos
				else: # window is 0 therefore is trans analysis
					temp['pv'] = fgene['pv'][:]
					temp['pv_perm'] = fgene['pv_perm'][:]
					temp['beta'] = fgene['beta'][:]
			except:
                                print "nothing in here"
				pass

			#append the temp table into the big table
			for key in temp.keys():
				smartAppend(table,key,temp[key])
				#print table

		f.close()

	for key in table.keys():
		#print key
		try: 
			table[key] = SP.concatenate(table[key])
		except:
			pass


        if len(table.keys())!=0:       
	# add corrected qvalues also across genes
                #table['qv_all'] = FDR.qvalues(table['qv'])
		pass
        else:
                print "Warning: no genes found"
	summary = h5py.File(summary,'w')
	smartDumpDictHdf5(table,summary)
	summary.close()

	sys.exit(0)

